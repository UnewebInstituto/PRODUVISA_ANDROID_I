-----

### Paso 1: Configuración en el `activity_main.xml`

Este paso sigue siendo el mismo, ya que la interfaz de usuario se define en XML y es independiente del lenguaje de programación utilizado en la lógica de la actividad.

Abre el archivo **`app/res/layout/activity_main.xml`** y asegúrate de tener el siguiente `Button`:

```xml
<Button
    android:id="@+id/showToastButton"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Mostrar Toast"
    app:layout_constraintBottom_toBottomOf="parent"
    app:layout_constraintEnd_toEndOf="parent"
    app:layout_constraintStart_toStartOf="parent"
    app:layout_constraintTop_toTopOf="parent" />
```

-----

### Paso 2: Implementación en el `MainActivity.java`

Ahora, vamos a escribir la lógica en el archivo de la actividad principal usando Java.

Abre el archivo **`app/java/com.tudominio.tuproyecto/MainActivity.java`**. Dentro del método `onCreate`, escribe el siguiente código:

```java
package com.tudominio.tuproyecto;


import androidx.appcompat.app.AppCompatActivity;


import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.Toast; // Importa la clase Toast


public class MainActivity extends AppCompatActivity {


 @Override
 protected void onCreate(Bundle savedInstanceState) {
 super.onCreate(savedInstanceState);
 setContentView(R.layout.activity_main);


 // 1. Encontrar el botón por su ID
 Button showToastButton = findViewById(R.id.showToastButton);


 // 2. Asignar un listener al botón para detectar el clic
 showToastButton.setOnClickListener(new View.OnClickListener() {
  @Override
  public void onClick(View v) {
   // 3. Crear y mostrar el Toast
   Toast.makeText(MainActivity.this, "¡Hola, soy una notificación Toast!", Toast.LENGTH_SHORT).show();
  }
 });
 }
}
```

### Explicación del Código en Java

1.  **`import android.widget.Toast;`**: Importa la clase `Toast` necesaria para crear las notificaciones emergentes.
2.  **`Button showToastButton = findViewById(R.id.showToastButton);`**: Encuentra la referencia al `Button` que definiste en el archivo `activity_main.xml` utilizando su ID.
3.  **`showToastButton.setOnClickListener(new View.OnClickListener() { ... });`**: Establece un listener (escuchador) para el evento de clic del botón. Cuando el botón es clickeado, el código dentro del método `onClick` se ejecutará.
4.  **`@Override public void onClick(View v) { ... }`**: Este es el método que se llama automáticamente cuando el botón es clickeado.
5.  **`Toast.makeText(MainActivity.this, "¡Hola, soy una notificación Toast!", Toast.LENGTH_SHORT).show();`**: Crea y muestra la notificación Toast.
      * **`MainActivity.this`**: Proporciona el `Context` de la aplicación. En Java, se usa la clase de la actividad seguida de `.this` para referirse al contexto actual.
      * **`"¡Hola, soy una notificación Toast!"`**: El texto que se mostrará en la notificación.
      * **`Toast.LENGTH_SHORT`**: La duración de la notificación (corta). También puedes usar `Toast.LENGTH_LONG` para una duración mayor.
      * **`.show()`**: Hace que la notificación Toast sea visible para el usuario.

-----

### Paso 3: Probarlo en el emulador

Los pasos para ejecutar y probar la aplicación en el emulador son exactamente los mismos que se describieron anteriormente.

1.  Ejecuta tu aplicación.
2.  Haz clic en el botón "Mostrar Toast".
3.  Verifica que aparezca la notificación emergente con el texto "¡Hola, soy una notificación Toast\!" en la parte inferior de la pantalla.

Este ejemplo en Java logra exactamente el mismo resultado que el ejemplo en Kotlin, mostrando cómo realizar la misma tarea utilizando la sintaxis y las convenciones del lenguaje Java en el contexto del desarrollo de Android.